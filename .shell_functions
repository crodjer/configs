#!/usr/bin/env bash

debug_shell () {
    if [ "$DEBUG_SHELL" ]; then
        echo "$(date +'%T-%N') $@"
    fi
}

function make_home () {
    local usage="$0 [-h <host>] [-x] [-c <configs-dir>]"
    usage="$usage\n\th: the remote host"
    usage="$usage\n\tc: the source configs directory (default: ~/configs/)"
    usage="$usage\n\tx: actually run commands (dry run by default)"

    local dry_run="true"
    local configs=(
        .zshrc
        .profile
        .zprofile
        .gitconfig
        .gitignore
        .config/nvim/init.vim
        .config/nvim/colors
        .config/alacritty
        .tmux.conf
        .toprc
    )

    local remote
    local host
    local configs_src
    local config

    if [ -n "$CONFIGS_SRC_DIR" -a -d $CONFIGS_SRC_DIR ]; then
	configs_src="$CONFIGS_SRC_DIR"
    else
	echo "No config source directory!"
	return 1
    fi

    while getopts "hr:c:x" opt; do
        case $opt in
            h)
                echo "$usage"
                return 0
                ;;
            r)
                remote="true"
                host=$OPTARG
                ;;
            x)
                unset dry_run
                ;;
            c)
                configs_src=$OPTARG
                ;;
            \?)
                echo "$usage" >&2
                return 1
                ;;
        esac
    done

    function run () {
        echo "$ $*"
        if [ -z "$dry_run" ]; then
            eval $*
        fi
    }

    for config in "${configs[@]}"
    do
        local parent_dir="$(dirname "$config")"

        if [ "$parent_dir" = "." ]; then
            unset parent_dir
        fi

        if [ "$remote" ]; then
            if [ -n "$parent_dir" ]; then
                run ssh $host mkdir -p "'~/$(dirname $config)'"
            fi
            run scp "$configs_src/$config" $host:~/$config
        else
            if [ -n "$parent_dir" ]; then
                run mkdir -p "~/$(dirname $config)"
            fi
            run ln -sf "$configs_src/$config" "~/$config"
        fi
    done
}
export make_home

function set_nvim_listen_address {
    local server_name="default"
    if [ "$TMUX" ]; then
        local tmux_window=$(tmux display-message -p '#S-#I' 2> /dev/null)
    fi
    local sway_ws=$(swaymsg -t  get_workspaces 2> /dev/null | \
       jq -r "map(select(.focused == true)) | map(.name) | first")
    local i3_ws=$(i3-msg -t  get_workspaces 2> /dev/null | \
       jq -r "map(select(.focused == true)) | map(.name) | first")

    if [ "$tmux_window" ]; then
        server_name="tmux-$tmux_window"
    elif [ "$sway_ws" ]; then
        server_name="sway-$sway_ws"
    elif [ "$i3_ws" ]; then
        server_name="i3-$i3_ws"
    fi

    # Set the NVIM listen address. Works for the server (launched via `nvim`)
    # and client (launched via `nvr`).
    export NVIM_LISTEN_ADDRESS="/tmp/nvim-${server_name:-$1}-vim.sock"
}
export set_nvim_listen_address

function reload_shell () {
    source ~/.profile
    exec $SHELL
}
export reload_shell

function set_java_home() {
    local java_home=/usr/lib/jvm/$1

    if [ -z $1 ]; then
        1>&2 echo "JVM dir is required!"
        return 1
    fi

    if [ ! -d $java_home ]; then
        1>&2 echo "$java_home is not a valid Java Home!"
    fi

    export PATH=$java_home/bin:$(echo $PATH | sed -E 's#:?.+jvm/[^/]+/bin:##g')
    export JAVA_HOME=$java_home
}

function colorize_ls() {
    if [ -z "$LS_COLORS" -a -n "$(command -v dircolors)" -a "$TERM" = "alacritty" ]; then
        eval $(env TERM=alacritty-color dircolors)
    fi
}

function git_branch() {
    git symbolic-ref --short HEAD 2> /dev/null || {
        git rev-list --max-count=1 1 HEAD 2>/dev/null | cut -c 1-8
    }
}

set_nvim_listen_address
colorize_ls

alias ip='ip -br -c'
