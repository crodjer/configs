# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
#env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use 'alacritty' if it is
  # available, otherwise 'xterm-256color' is used.
  #TERM: xterm-256color

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 80
    lines: 24

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 2
    y: 2

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  decorations: none

  # When true, alacritty starts maximized.
  startup_mode: Maximized

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

fonts:
    source_code_pro: &scp
        family: 'Source Code Pro'

    # Raspberry Pi Font config.
    raspberry_pi: &rpi
        normal: *scp
        bold: *scp
        italic: *scp
        size: 9

        # font: *rpi
font:
  size: 16

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: false

schemes:
  solarized_light: &light
    # Default colors
    primary:
      background: '#fdf6e3' # base3
      foreground: '#657b83' # base00

    # Cursor colors
    cursor:
      text:   '#fdf6e3' # base3
      cursor: '#657b83' # base00

    # Normal colors
    normal:
      black:   '#073642' # base02
      red:     '#dc322f' # red
      green:   '#859900' # green
      yellow:  '#b58900' # yellow
      blue:    '#268bd2' # blue
      magenta: '#d33682' # magenta
      cyan:    '#2aa198' # cyan
      white:   '#eee8d5' # base2

    # Bright colors
    bright:
      black:   '#002b36' # base03
      red:     '#cb4b16' # orange
      green:   '#586e75' # base01
      yellow:  '#657b83' # base00
      blue:    '#839496' # base0
      magenta: '#6c71c4' # violet
      cyan:    '#93a1a1' # base1
      white:   '#fdf6e3' # base3

  solarized_dark: &dark
    # Default colors
    primary:
      background: '#002b36' # base03
      foreground: '#839496' # base0

    # Cursor colors
    cursor:
      text:   '#002b36' # base03
      cursor: '#839496' # base0

    # Normal colors
    normal:
      black:   '#073642' # base02
      red:     '#dc322f' # red
      green:   '#859900' # green
      yellow:  '#b58900' # yellow
      blue:    '#268bd2' # blue
      magenta: '#d33682' # magenta
      cyan:    '#2aa198' # cyan
      white:   '#eee8d5' # base2

    # Bright colors
    bright:
      black:   '#586e75' # base01
      red:     '#cb4b16' # orange
      green:   '#586e75' # base01
      yellow:  '#657b83' # base00
      blue:    '#839496' # base0
      magenta: '#6c71c4' # violet
      cyan:    '#93a1a1' # base1
      white:   '#fdf6e3' # base3

colors: *dark

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
visual_bell:
  animation: Ease
  duration: 10

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
background_opacity: 1.0

# Mouse bindings
#
# Available fields:
#   - mouse
#   - action
#   - mods (optional)
#
# Values for `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    launcher: xdg-open

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to both the primary and
  # the selection clipboard. Otherwise, it will only be copied to the selection
  # clipboard.
  save_to_clipboard: false

dynamic_title: true

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify
# a key and modifiers required to trigger it, terminal modes where the binding
# is applicable, and what should be done when the key binding fires. It can
# either send a byte sequnce to the running application (`chars`), execute
# a predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Example:
#   `- { key: V, mods: Command, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
key_bindings:
  - { key: V,        mods: Control|Shift,    action: Paste               }
  - { key: C,        mods: Control|Shift,    action: Copy                }
  - { key: Paste,                   action: Paste                        }
  - { key: Copy,                    action: Copy                         }
  - { key: Q,        mods: Command, action: Quit                         }
  - { key: W,        mods: Command, action: Quit                         }
  - { key: Insert,   mods: Shift,   action: PasteSelection               }
  - { key: Key0,     mods: Control, action: ResetFontSize                }
  - { key: Equals,   mods: Control, action: IncreaseFontSize             }
  - { key: Subtract, mods: Control, action: DecreaseFontSize             }
  - { key: L,        mods: Control, action: ClearLogNotice               }
  - { key: L,        mods: Control, chars: "\x0c"                        }
  - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                    chars: "\x1b[H",   mode: ~AppCursor  }
  - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                     chars: "\x1b[F",   mode: ~AppCursor  }
  - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~"                   }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
  - { key: PageUp,                  chars: "\x1b[5~"                     }
  - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~"                   }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
  - { key: PageDown,                chars: "\x1b[6~"                     }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
  - { key: Back,                    chars: "\x7f"                        }
  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
  - { key: Insert,                  chars: "\x1b[2~"                     }
  - { key: Delete,                  chars: "\x1b[3~"                     }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
  - { key: F1,                      chars: "\x1bOP"                      }
  - { key: F2,                      chars: "\x1bOQ"                      }
  - { key: F3,                      chars: "\x1bOR"                      }
  - { key: F4,                      chars: "\x1bOS"                      }
  - { key: F5,                      chars: "\x1b[15~"                    }
  - { key: F6,                      chars: "\x1b[17~"                    }
  - { key: F7,                      chars: "\x1b[18~"                    }
  - { key: F8,                      chars: "\x1b[19~"                    }
  - { key: F9,                      chars: "\x1b[20~"                    }
  - { key: F10,                     chars: "\x1b[21~"                    }
  - { key: F11,                     chars: "\x1b[23~"                    }
  - { key: F12,                     chars: "\x1b[24~"                    }
  - { key: F1,       mods: Shift,   chars: "\x1b[1;2P"                   }
  - { key: F2,       mods: Shift,   chars: "\x1b[1;2Q"                   }
  - { key: F3,       mods: Shift,   chars: "\x1b[1;2R"                   }
  - { key: F4,       mods: Shift,   chars: "\x1b[1;2S"                   }
  - { key: F5,       mods: Shift,   chars: "\x1b[15;2~"                  }
  - { key: F6,       mods: Shift,   chars: "\x1b[17;2~"                  }
  - { key: F7,       mods: Shift,   chars: "\x1b[18;2~"                  }
  - { key: F8,       mods: Shift,   chars: "\x1b[19;2~"                  }
  - { key: F9,       mods: Shift,   chars: "\x1b[20;2~"                  }
  - { key: F10,      mods: Shift,   chars: "\x1b[21;2~"                  }
  - { key: F11,      mods: Shift,   chars: "\x1b[23;2~"                  }
  - { key: F12,      mods: Shift,   chars: "\x1b[24;2~"                  }
  - { key: F1,       mods: Control, chars: "\x1b[1;5P"                   }
  - { key: F2,       mods: Control, chars: "\x1b[1;5Q"                   }
  - { key: F3,       mods: Control, chars: "\x1b[1;5R"                   }
  - { key: F4,       mods: Control, chars: "\x1b[1;5S"                   }
  - { key: F5,       mods: Control, chars: "\x1b[15;5~"                  }
  - { key: F6,       mods: Control, chars: "\x1b[17;5~"                  }
  - { key: F7,       mods: Control, chars: "\x1b[18;5~"                  }
  - { key: F8,       mods: Control, chars: "\x1b[19;5~"                  }
  - { key: F9,       mods: Control, chars: "\x1b[20;5~"                  }
  - { key: F10,      mods: Control, chars: "\x1b[21;5~"                  }
  - { key: F11,      mods: Control, chars: "\x1b[23;5~"                  }
  - { key: F12,      mods: Control, chars: "\x1b[24;5~"                  }
  - { key: F1,       mods: Alt,     chars: "\x1b[1;6P"                   }
  - { key: F2,       mods: Alt,     chars: "\x1b[1;6Q"                   }
  - { key: F3,       mods: Alt,     chars: "\x1b[1;6R"                   }
  - { key: F4,       mods: Alt,     chars: "\x1b[1;6S"                   }
  - { key: F5,       mods: Alt,     chars: "\x1b[15;6~"                  }
  - { key: F6,       mods: Alt,     chars: "\x1b[17;6~"                  }
  - { key: F7,       mods: Alt,     chars: "\x1b[18;6~"                  }
  - { key: F8,       mods: Alt,     chars: "\x1b[19;6~"                  }
  - { key: F9,       mods: Alt,     chars: "\x1b[20;6~"                  }
  - { key: F10,      mods: Alt,     chars: "\x1b[21;6~"                  }
  - { key: F11,      mods: Alt,     chars: "\x1b[23;6~"                  }
  - { key: F12,      mods: Alt,     chars: "\x1b[24;6~"                  }
  - { key: F1,       mods: Super,   chars: "\x1b[1;3P"                   }
  - { key: F2,       mods: Super,   chars: "\x1b[1;3Q"                   }
  - { key: F3,       mods: Super,   chars: "\x1b[1;3R"                   }
  - { key: F4,       mods: Super,   chars: "\x1b[1;3S"                   }
  - { key: F5,       mods: Super,   chars: "\x1b[15;3~"                  }
  - { key: F6,       mods: Super,   chars: "\x1b[17;3~"                  }
  - { key: F7,       mods: Super,   chars: "\x1b[18;3~"                  }
  - { key: F8,       mods: Super,   chars: "\x1b[19;3~"                  }
  - { key: F9,       mods: Super,   chars: "\x1b[20;3~"                  }
  - { key: F10,      mods: Super,   chars: "\x1b[21;3~"                  }
  - { key: F11,      mods: Super,   chars: "\x1b[23;3~"                  }
  - { key: F12,      mods: Super,   chars: "\x1b[24;3~"                  }

  # Fix OSX related fuck ups with Option/Meta
  - { key: A,         mods: Alt,       chars: "\x1ba"                    }
  - { key: B,         mods: Alt,       chars: "\x1bb"                    }
  - { key: C,         mods: Alt,       chars: "\x1bc"                    }
  - { key: D,         mods: Alt,       chars: "\x1bd"                    }
  - { key: E,         mods: Alt,       chars: "\x1be"                    }
  - { key: F,         mods: Alt,       chars: "\x1bf"                    }
  - { key: G,         mods: Alt,       chars: "\x1bg"                    }
  - { key: H,         mods: Alt,       chars: "\x1bh"                    }
  - { key: I,         mods: Alt,       chars: "\x1bi"                    }
  - { key: J,         mods: Alt,       chars: "\x1bj"                    }
  - { key: K,         mods: Alt,       chars: "\x1bk"                    }
  - { key: L,         mods: Alt,       chars: "\x1bl"                    }
  - { key: M,         mods: Alt,       chars: "\x1bm"                    }
  - { key: N,         mods: Alt,       chars: "\x1bn"                    }
  - { key: O,         mods: Alt,       chars: "\x1bo"                    }
  - { key: P,         mods: Alt,       chars: "\x1bp"                    }
  - { key: Q,         mods: Alt,       chars: "\x1bq"                    }
  - { key: R,         mods: Alt,       chars: "\x1br"                    }
  - { key: S,         mods: Alt,       chars: "\x1bs"                    }
  - { key: T,         mods: Alt,       chars: "\x1bt"                    }
  - { key: U,         mods: Alt,       chars: "\x1bu"                    }
  - { key: V,         mods: Alt,       chars: "\x1bv"                    }
  - { key: W,         mods: Alt,       chars: "\x1bw"                    }
  - { key: X,         mods: Alt,       chars: "\x1bx"                    }
  - { key: Y,         mods: Alt,       chars: "\x1by"                    }
  - { key: Z,         mods: Alt,       chars: "\x1bz"                    }
  - { key: Semicolon, mods: Alt,       chars: "\x1b;"                    }
  - { key: A,         mods: Alt|Shift, chars: "\x1bA"                    }
  - { key: B,         mods: Alt|Shift, chars: "\x1bB"                    }
  - { key: C,         mods: Alt|Shift, chars: "\x1bC"                    }
  - { key: D,         mods: Alt|Shift, chars: "\x1bD"                    }
  - { key: E,         mods: Alt|Shift, chars: "\x1bE"                    }
  - { key: F,         mods: Alt|Shift, chars: "\x1bF"                    }
  - { key: G,         mods: Alt|Shift, chars: "\x1bG"                    }
  - { key: H,         mods: Alt|Shift, chars: "\x1bH"                    }
  - { key: I,         mods: Alt|Shift, chars: "\x1bI"                    }
  - { key: J,         mods: Alt|Shift, chars: "\x1bJ"                    }
  - { key: K,         mods: Alt|Shift, chars: "\x1bK"                    }
  - { key: L,         mods: Alt|Shift, chars: "\x1bL"                    }
  - { key: M,         mods: Alt|Shift, chars: "\x1bM"                    }
  - { key: N,         mods: Alt|Shift, chars: "\x1bN"                    }
  - { key: O,         mods: Alt|Shift, chars: "\x1bO"                    }
  - { key: P,         mods: Alt|Shift, chars: "\x1bP"                    }
  - { key: Q,         mods: Alt|Shift, chars: "\x1bQ"                    }
  - { key: R,         mods: Alt|Shift, chars: "\x1bR"                    }
  - { key: S,         mods: Alt|Shift, chars: "\x1bS"                    }
  - { key: T,         mods: Alt|Shift, chars: "\x1bT"                    }
  - { key: U,         mods: Alt|Shift, chars: "\x1bU"                    }
  - { key: V,         mods: Alt|Shift, chars: "\x1bV"                    }
  - { key: W,         mods: Alt|Shift, chars: "\x1bW"                    }
  - { key: X,         mods: Alt|Shift, chars: "\x1bX"                    }
  - { key: Y,         mods: Alt|Shift, chars: "\x1bY"                    }
  - { key: Z,         mods: Alt|Shift, chars: "\x1bZ"                    }
  - { key: Semicolon, mods: Alt|Shift, chars: "\x1b:"                   }

  - { key: Key1,      mods: Alt,       chars: "\x1b1"                    }
  - { key: Key2,      mods: Alt,       chars: "\x1b2"                    }
  - { key: Key3,      mods: Alt,       chars: "\x1b3"                    }
  - { key: Key4,      mods: Alt,       chars: "\x1b4"                    }
  - { key: Key5,      mods: Alt,       chars: "\x1b5"                    }
  - { key: Key6,      mods: Alt,       chars: "\x1b6"                    }
  - { key: Key7,      mods: Alt,       chars: "\x1b7"                    }
  - { key: Key8,      mods: Alt,       chars: "\x1b8"                    }
  - { key: Key9,      mods: Alt,       chars: "\x1b9"                    }
  - { key: Key0,      mods: Alt,       chars: "\x1b0"                    }
  - { key: Space,     mods: Control,   chars: "\x00"                     } # Ctrl + Space
  - { key: Grave,     mods: Alt,       chars: "\x1b`"                    } # Alt + `
  - { key: Grave,     mods: Alt|Shift, chars: "\x1b~"                    } # Alt + ~
  - { key: Period,    mods: Alt,       chars: "\x1b."                    } # Alt + .
  - { key: Key8,      mods: Alt|Shift, chars: "\x1b*"                    } # Alt + *
  - { key: Key3,      mods: Alt|Shift, chars: "\x1b#"                    } # Alt + #
  - { key: Period,    mods: Alt|Shift, chars: "\x1b>"                    } # Alt + >
  - { key: Comma,     mods: Alt|Shift, chars: "\x1b<"                    } # Alt + <
  - { key: Minus,     mods: Alt|Shift, chars: "\x1b_"                    } # Alt + _
  - { key: Key5,      mods: Alt|Shift, chars: "\x1b%"                    } # Alt + %
  - { key: Key6,      mods: Alt|Shift, chars: "\x1b^"                    } # Alt + ^
  - { key: Backslash, mods: Alt,       chars: "\x1b\\"                   } # Alt + \
  - { key: Backslash, mods: Alt|Shift, chars: "\x1b|"                    } # Alt + |
  - { key: Period,   mods: Alt,       chars: "\x1b."                     }

  - { key: Key8,     mods: Alt|Shift, chars: "\x1b*"                     }
  - { key: Key3,     mods: Alt|Shift, chars: "\x1b#"                     }
  - { key: Key1,     mods: Alt,     chars: "\x1b1"                       }
  - { key: Key2,     mods: Alt,     chars: "\x1b2"                       }
  - { key: Key3,     mods: Alt,     chars: "\x1b3"                       }
  - { key: Key4,     mods: Alt,     chars: "\x1b4"                       }
  - { key: Key5,     mods: Alt,     chars: "\x1b5"                       }
  - { key: Key6,     mods: Alt,     chars: "\x1b6"                       }
  - { key: Key7,     mods: Alt,     chars: "\x1b7"                       }
  - { key: Key8,     mods: Alt,     chars: "\x1b8"                       }
  - { key: Key9,     mods: Alt,     chars: "\x1b9"                       }
  - { key: Key0,     mods: Alt,     chars: "\x1b0"                       }
