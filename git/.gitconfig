[core]
	whitespace = trailing-space,space-before-tab
	excludesfile = ~/.gitignore
[user]
	name = Rohan
	email = code@rohanjain.in
[format]
	signoff = true
[grep]
	lineNumber = true
[color]
	ui = true
[merge]
	summary = true
[diff]
  colorMoved = default
[commit]
	verbose = true
	gpgsign = true
[rerere]
	enabled = true
[pull]
	ff = only
	rebase = false
[include]
    path = ~/.gitconfig.delta
    path = ~/.gitconfig.local
[fetch]
    prune = true
[push]
	autoSetupRemote = true
[init]
	defaultBranch = main
[alias]
  # Get the current branch (or ref)
  current-branch = "rev-parse --abbrev-ref HEAD"

  # Rebase while cleaning up the timestamps (perhaps, due to amends)
  clean-cd = "rebase --committer-date-is-author-date"
  # Rebase while cleaning timestamps, relative to `origin`
  o-clean-cd = "!git clean-cd origin/$(git current-branch)"

  # Abort current rebase
  rb-a = "rebase --abort"
  # Continue current rebase
  rb-c = "rebase --continue"

  # Abort current cherry-pick
  chp-a = "cherry-pick --abort"
  # Continue current cherry-pick
  chp-c = "cherry-pick --continue"

  # Get origin's main branch name
  # Fetch origin's main/master branch
  main-branch = "symbolic-ref refs/remotes/origin/HEAD --short"
  main-branch-name = "!git main-branch | cut -d '/' -f 2"
  rbm = "!git fetch origin $(git main-branch-name) && git rebase $(git main-branch)"

  l = "log --name-only"
  lf = "log --show-signature --format=fuller"
  s = "show --name-only"
  sf = "show --show-signature --format=fuller"

  # Add files using FZF
  a = "!git ls-files --deleted --modified --other --exclude-standard | fzf -0 -m --preview 'git diff --color=always {-1}' | xargs -r git add"

  # Add files using FZF in interactive patch mode.
  ap = "!git ls-files --deleted --modified --exclude-standard | fzf -0 -m --preview 'git diff --color=always {-1}' | xargs -r -o git add -p"

  # Checkout branch using FZF
  b = "!git branch --all | grep -v '^[*+]' | awk '{print $1}' | fzf -0 --preview 'git show --color=always {-1}' | sed 's/remotes\\/origin\\///g' | xargs -r git checkout"

  # Search stash using FZF and pop it.
  sp = "!git stash list | fzf -0 --preview 'git show --pretty=oneline --color=always --patch \"$(echo {} | cut -d: -f1)\"' | cut -d: -f1 | xargs -r git stash pop"

  # Search modified files using FZF and edit them.
  edit = "!git ls-files --modified --other --exclude-standard | sort -u | fzf -0 --multi --preview 'git diff --color {}' | xargs -r $EDITOR -p"

  # Search previous commits using FZF and create a fixup.
  fx = "!git log --oneline --no-decorate --no-merges | fzf -0 --preview 'git show --color=always --format=oneline {1}' | awk '{print $1}' | xargs -r git commit --fixup"

  # Search staged files using FZF and reset the selected ones.
  rs = "!git diff --name-only --cached | fzf -0 -m --preview 'git diff --color=always {-1}' | xargs -r git reset"
